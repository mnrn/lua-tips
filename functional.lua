--------------------------------------------------------------------------------
--! @brief Luaにおける高階関数を扱います
--! @date  2016/06/11
--! @ref   [お気楽 Lua プログラミング超入門](http://www.nct9.ne.jp/m_hiroi/light/lua.html)
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
--! @brief 関数と配列を受け取り、その関数を配列のすべての要素に適用して新しい配列を生成する
--! @param[in] fn  適用関数
--! @param[in] lst 適用対象の配列
--! @return 適用後の配列
--------------------------------------------------------------------------------
function map(fn, lst)
    local a = { }
    for i = 1, #lst do
        table.insert(a, fn(lst[i]))
    end
    return a
end


--------------------------------------------------------------------------------
--! @brief 述語関数と配列を受け取り、その配列のうち、述語を満たすもののみからなる配列を返す
--! @param[in] pred 述語関数
--! @param[in] lst  述語適応対象の配列
--! @return 述語を満たすもののみからなる配列
--------------------------------------------------------------------------------
function filter(pred, lst)
    local a = { }
    for i = 1, #lst do
        if pred(lst[i]) then
            table.insert(a, lst[i])
        end
    end
    return a
end


--------------------------------------------------------------------------------
--! @brief 左畳み込みを行います
--! @param[in] fn   適用関数
--! @param[in] init アキュムレータの初期値
--! @param[in] lst  適用対象の配列
--! @return  lstの各要素にfnを左側から適用した結果
--------------------------------------------------------------------------------
function foldl(fn, init, lst)
    local acc = init
    for i = 1, #lst do
        acc = fn(acc, lst[i])
    end
    return acc
end


--------------------------------------------------------------------------------
--! @brief 右畳み込みを行います
--! @param[in] fn   適応関数
--! @param[in] init アキュムレータの初期値
--! @param[in] lst  適応対象の配列
--! @return lstの各要素にfnを右側から適用した結果
--------------------------------------------------------------------------------
function foldr(fn, init, lst)
    local acc = init
    for i = #lst, 1, -1 do
        acc = fn(lst[i], acc)
    end
    return acc
end


--------------------------------------------------------------------------------
--! @brief カリー化されたマップ関数
--! @param[in] fn 適用関数
--! @return 配列を引数にとり、fnを配列のすべての要素に適用して
--          新しい配列を生成するような関数を返す
--------------------------------------------------------------------------------
function curried_map(fn)
    local function map_(lst)
        local a = { }
        for i = 1, #lst do
            table.insert(a, fn(lst[i]))
        end
        return a
    end
    return map_
end


--------------------------------------------------------------------------------
--! 引数に渡された関数fnに対し、メモ化を施す
--! @param[in] fn メモ化対象の関数
--! @return メモ化が施された関数
--------------------------------------------------------------------------------
function memoizer(fn)
    local memo = { }           --! メモ化テーブル

    local function shell(...)  --! メモ化された関数
        local key = table.concat({...}, ',')
        if not memo[key] then  -- メモがなければメモる
            memo[key] = fn(...)
        end
        return memo[key]
    end

    return shell               -- メモ化が施された関数を返す
end




